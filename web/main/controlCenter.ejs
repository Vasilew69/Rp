<%- await include('parts/header.ejs', locals) %>

<style>
    /* Discord Live Event stuff */
    .event-time {
        background-color: rgba(0, 0, 0, 0.075);
        padding: 0px 6px;
        border-radius: 4px;
    }
    .event-footer {
        font-weight: 700;
        vertical-align: text-bottom;
    }
    .alert-title-icon {
        vertical-align: sub;
        fill: currentColor
    }

    .alert-success.event-live-glow {
        animation: alertGlow 1s infinite alternate;
    }
    @keyframes alertGlow {
        from {
            box-shadow: 0 0 8px 0px rgb(34, 128, 25);
        }
        to {
            box-shadow: 0 0 8px 4px rgb(34, 128, 25);
        }
    }

    #status-card{
        font-size: 1.15rem;
        font-weight: 500;
        line-height: 2;
    }

    .dashboard-chart {
        width: 100% !important; 
        max-width: 890px !important;
    }
    .pre-log-content {
        height: calc(100vh - 270px); /* -251px */
        margin-bottom: 0;
        font-size: 100%;
        /* word-break: break-all; */
    }

    .nui-height {
        height: calc(100vh - 170px);
    }

    .card {
        height: 100%;
        margin-bottom: 0 !important;
    }

    .e-src{
        color: var(--dark);
        font-weight: 900 !important;
        padding: .15rem;
        margin-left: .25rem;
        margin-right: .25rem;
    }
    .e-src-player{
        color: var(--primary);
        font-weight: 900 !important;
        cursor: pointer;
    }
    .e-src-player:hover{
        /* color: var(--warning); */
        color: var(--light);
        background-color: var(--dark);
    }

    .filter-controls-container {
        margin-top: 10px;
    }

    .filter-show-toggle {
        display: none;
    }

    @media only screen and (max-width: 1200px) {
        .card-containers {
            margin-bottom: 20px;
        }

        .filter-show-toggle {
            display: flex;
        }

        .section-title {
            display: flex;
            flex-basis: 0 ;
            justify-content: center;
            align-items: center;
        }
    }

    @media (min-width: 1250px) and (max-width: 1450px)  {
        .override-bootstrap {
            flex: 0 0 auto !important;
            max-width: 65% !important;
        }
    }


</style>

<!-- Title & outdated message: -->
<% if (isWebInterface) { %>
    <div class="text-center mb-4">
        <h2><%= serverName %> Control Center</h2>
    </div>
<% } %>
<% if (txaOutdated) { %>
    <div class="row justify-content-md-center">
        <div class="col-md-6 text-center">
            <div class="alert alert-<%= txaOutdated.color %>" role="alert">
                <h5 style="margin-bottom: 0px;">
                    <svg class="alert-title-icon" width="22" height="22">
                        <use href="img/coreui_icons.svg#cil-cloud-download"></use>
                    </svg>
                    <% if (txaOutdated.semverDiff === 'patch') { %>
                        A patch (bug fix) update is available for txAdmin.
                    <% } else{ %> 
                        This version of txAdmin is outdated.
                    <% } %>
                </h5>
                <% if (txaOutdated.semverDiff === 'patch') { %>
                    If you are experiencing any kind of issue, please update to v<%= txaOutdated.latest %>.
                <% } else{ %> 
                    Version <%= txaOutdated.latest %> has been released bringing new features, bug fixes and improvements. <br>
                    <div class="event-footer">
                        Please update now. Support Discord:
                        <a href="https://discord.gg/uAmsGa2" target="_blank" >
                            <img src="https://discordapp.com/api/guilds/577993482761928734/widget.png?style=shield"></img>
                        </a>
                    </div>
                <% } %>
                
            </div>
        </div>
    </div>
<% } %>

<% if (discordEvent) { %>
    <div class="row justify-content-md-center">
        <div class="col-md-6 text-center">
            <div class="alert <%= (discordEvent.isLive ? 'alert-success border-success' : 'alert-warning border-warning') %> event-live-glow" role="alert">
                <h5 style="margin-bottom: 0px;">
                    <svg class="alert-title-icon" width="22" height="22">
                        <use href="img/coreui_icons.svg#discord-event"></use>
                    </svg>
                    <%= (discordEvent.isLive ? 'The Discord Live Event started' : 'A Discord Live Event will start in') %>:
                    <span class="event-time" title="<%= (new Date(discordEvent.timestamp)).toString() %>"><%= discordEvent.time %></span>
                </h5>
                <i><%= discordEvent.description %></i>
                <div class="event-footer">
                    Join now:
                    <a href="<%= discordEvent.joinLink %>" target="_blank" >
                        <img src="<%= discordEvent.imgSrc %>"></img>
                    </a>
                </div>
            </div>
        </div>
    </div>
<% } %>

<div class="row justify-content-center">
    <!-- Server Control -->
    <div class="col-lg-8 col-xl-6 dashboard-card mw-col6">
        <div class="card card-accent-danger" style="min-height: 200px;">
            <div class="card-header text-center">
                <h5 class="d-inline">Server Control</h5>
            </div>
            <div class="card-body text-center align-middle">
                <button onclick="txApiFxserverControl('start')"
                    class="btn btn-outline-<%= perms.controlsClass %> btn-lg mx-auto m-2" type="button" id="ctrl-start"
                    <%= perms.controls %>>START</button> &nbsp;
                <button onclick="txApiFxserverControl('restart')"
                    class="btn btn-outline-<%= perms.controlsClass %> btn-lg mx-auto m-2" type="button"
                    id="ctrl-restart" <%= perms.controls %>>RESTART</button> &nbsp;
                <button onclick="txApiFxserverControl('stop')"
                    class="btn btn-outline-<%= perms.controlsClass %> btn-lg mx-auto m-2" type="button" id="ctrl-stop"
                    <%= perms.controls %>>STOP</button>
                <br />

                <button onclick="controlCommand('admin_broadcast')" class="btn btn-outline-dark btn-md mx-auto m-2"
                    type="button" id="ctrl-announce" <%= perms.commandMessage %>>Announcement</button>
                <button onclick="controlCommand('kick_all')" class="btn btn-outline-dark btn-md mx-auto m-2"
                    type="button" id="ctrl-kick-all" <%= perms.commandKick %>>Kick All Players</button>
                <button class="btn btn-outline-dark btn-md mx-auto m-2"
                    type="button" id="ctrl-schedule-restart" <%= perms.controls %>>Schedule Restart</button>
            </div>
            <div class="card-body text-center align-middle" id="status-card">
                <h4 class="d-inline">Info</h4><br>
                Discord Bot Status:
                    <span class="badge badge-light" id="status-discord"> ?? </span> <br>
                    Server Status: 
                    <span class="badge badge-light" id="status-server"> ?? </span>
                    <span class="badge badge-light" id="status-serverProcess"> ?? </span> <br>
                Next Restart:
                    <span class="font-weight-light text-warnings" id="status-nextRestartTime"> not scheduled </span>
                    <button class="btn btn-inline btn-warning d-none" type="button" id="status-nextRestartBtnCancel">
                        Cancel
                    </button>
                    <button class="btn btn-inline btn-dark d-none" type="button" id="status-nextRestartBtnEnable">
                        Enable
                    </button>
            </div>
        </div>
    </div>



    <!-- Status Info
    <div class="col-lg-8 col-xl-6 dashboard-card mw-col6">
        <div class="card card-accent-danger" style="min-height: 200px;">
            <div class="card-header text-center">
                <h5 class="d-inline">Status Info</h5>
            </div>
            <div class="card-body" id="status-card">
                Discord Bot Status:
                    <span class="badge badge-light" id="status-discord"> ?? </span> <br>
                    Server Status: 
                    <span class="badge badge-light" id="status-server"> ?? </span>
                    <span class="badge badge-light" id="status-serverProcess"> ?? </span> <br>
                Next Restart:
                    <span class="font-weight-light text-warnings" id="status-nextRestartTime"> not scheduled </span>
                    <button class="btn btn-inline btn-warning d-none" type="button" id="status-nextRestartBtnCancel">
                        Cancel
                    </button>
                    <button class="btn btn-inline btn-dark d-none" type="button" id="status-nextRestartBtnEnable">
                        Enable
                    </button>
            </div>
        </div>
    </div>-->

    <div class="row">
        <div class="col-xl-3 col-lg-12 card-containers" style="min-width: 235px;">
            <div class="card border-primary" >
                <div class="card-body text-center">
                    <div id="cardstatus" class="d-nonex">
                        <h4>Mode: <span class="text-success" id="modeLabel">LIVE</span></h4>
                        <p>
                            <strong>From:</strong> <span id="histLogStart">--</span> <br>
                            <strong>To:</strong> <span id="histLogEnd">--</span> <br>
                        </p>
                        <button type="button" class="btn btn-outline-dark btn-sm mb-2" id="viewOlderBtn">
                            &lt; View Older
                        </button>
                        <button type="button" class="btn btn-outline-dark btn-sm mb-2" id="viewNewerBtn">
                            View Newer &gt;
                        </button>
                        <br>
                        <button type="button" id="clearConsole" class="btn btn-outline-dark btn-sm mb-2">
                            Clear Console
                        </button>
                        <!-- TODO: add modal -->
                        <button type="button" id="showLogsModalBtn" class="btn btn-outline-dark btn-sm mb-2 d-none">
                            Download Log
                        </button>
                    </div>
    
                    <hr class="border-primary">
                    <div class='section-title'>
                        <button
                          style='margin-left: 10px;'
                          class='btn btn-info filter-show-toggle rounded'
                          data-toggle='collapse'
                          href="#filter-control-container"
                          role='button'
                          aria-expanded='false'
                          aria-controls='collapseControls'>
                            Show Log Filters
                        </button>
                    </div>
                    <!--<div class='filter-controls-container' id='filter-control-container'>
                        <h4>Logger Filters</h4>
                        <div class="form-group row mb-1">
                            <label class="col-sm-8 col-form-label">Player join/leave</label>
                            <div class="col-sm-4">
                                <label class="c-switch c-switch-sm c-switch-label c-switch-pill c-switch-success fix-pill-form">
                                    <input class="c-switch-input e-filter-sw" type="checkbox" checked data-e-type="PlayerJoinLeave">
                                    <span class="c-switch-slider" data-checked="On" data-unchecked="Off"></span>
                                </label>
                            </div>
                        </div>
                        <div class="form-group row mb-1">
                            <label class="col-sm-8 col-form-label">Chat Messages</label>
                            <div class="col-sm-4">
                                <label class="c-switch c-switch-sm c-switch-label c-switch-pill c-switch-success fix-pill-form">
                                    <input class="c-switch-input e-filter-sw" type="checkbox" checked data-e-type="ChatMessage">
                                    <span class="c-switch-slider" data-checked="On" data-unchecked="Off"></span>
                                </label>
                            </div>
                        </div>
                        <div class="form-group row mb-1">
                            <label class="col-sm-8 col-form-label">Player Death</label>
                            <div class="col-sm-4">
                                <label class="c-switch c-switch-sm c-switch-label c-switch-pill c-switch-success fix-pill-form">
                                    <input class="c-switch-input e-filter-sw" type="checkbox" checked data-e-type="DeathNotice">
                                    <span class="c-switch-slider" data-checked="On" data-unchecked="Off"></span>
                                </label>
                            </div>
                        </div>
                        <div class="form-group row mb-1">
                            <label class="col-sm-8 col-form-label">Menu Actions</label>
                            <div class="col-sm-4">
                                <label class="c-switch c-switch-sm c-switch-label c-switch-pill c-switch-success fix-pill-form">
                                    <input class="c-switch-input e-filter-sw" type="checkbox" checked data-e-type="MenuEvent">
                                    <span class="c-switch-slider" data-checked="On" data-unchecked="Off"></span>
                                </label>
                            </div>
                        </div>
                        <div class="form-group row mb-1">
                            <label class="col-sm-8 col-form-label">Explosions</label>
                            <div class="col-sm-4">
                                <label class="c-switch c-switch-sm c-switch-label c-switch-pill c-switch-success fix-pill-form">
                                    <input class="c-switch-input e-filter-sw" type="checkbox" checked data-e-type="explosionEvent">
                                    <span class="c-switch-slider" data-checked="On" data-unchecked="Off"></span>
                                </label>
                            </div>
                        </div>
                        <div class="form-group row mb-1">
                            <label class="col-sm-8 col-form-label">Commands</label>
                            <div class="col-sm-4">
                                <label class="c-switch c-switch-sm c-switch-label c-switch-pill c-switch-success fix-pill-form">
                                    <input class="c-switch-input e-filter-sw" type="checkbox" checked data-e-type="CommandExecuted">
                                    <span class="c-switch-slider" data-checked="On" data-unchecked="Off"></span>
                                </label>
                            </div>
                        </div>
                        <div class="form-group row mb-1">
                            <label class="col-sm-8 col-form-label">System Events</label>
                            <div class="col-sm-4">
                                <label class="c-switch c-switch-sm c-switch-label c-switch-pill c-switch-success fix-pill-form">
                                    <input class="c-switch-input e-filter-sw" type="checkbox" checked data-e-type="System">
                                    <span class="c-switch-slider" data-checked="On" data-unchecked="Off"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row mb-1">
                        <label class="col-sm-8 col-form-label">Other Events</label>
                        <div class="col-sm-4">
                            <label class="c-switch c-switch-sm c-switch-label c-switch-pill c-switch-success fix-pill-form">
                                <input class="c-switch-input e-filter-sw" type="checkbox" checked data-e-type="other">
                                <span class="c-switch-slider" data-checked="On" data-unchecked="Off"></span>
                            </label>
                        </div>
                    </div> -->
    
                </div>
            </div>
        </div>
        <div class="col-xl-9 col-lg-12 card-containers override-bootstrap">
            <div class="card border-primary">
                <div class="card-body p-3" style="position: relative">
                    <pre id="logContainer" class="thin-scroll pre-log-content <%= isWebInterface ? '' : 'nui-height' %>"></pre>
                    <div id="autoScrollDiv">
                        <a id="autoScrollBtn" class="d-none" href="#"><span></span><span></span><span></span></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

<!-- Benchmark, update, pre-release messages -->

<div class="row justify-content-md-center">
    <div class="col-md-6 text-center">
        <div id="tsMessage" class="d-none">
            🏆 With <span id="tsMedianPlayerCount">?</span> median players, your server may be in the worldwide Top 1000 servers. <br>
            Join <strong><a href="https://discord.gg/qmMq79D59T" target="_blank">discord.gg/txAdmin</a></strong> and use the <code>/server</code> command to check the rank see if you are eligible for the <i>TOP SERVER</i> role (Top 500 only).
        </div>
        <% if (fxsOutdated) { %>
            <div class="alert alert-<%= fxsOutdated.color %> border-<%= fxsOutdated.color %>" role="alert">
                <a href="<%= fxsOutdated.downloadLink %>" target="_blank" class="alert-link"><%= fxsOutdated.message %></a>
                <br>
                <i><%= fxsOutdated.subtext %></i>
            </div>
        <% } %>
        <% if (txAdminVersion.includes('-')) { %>
            <span class="text-danger font-weight-bold">
                You are using a pre-release version of txAdmin destined for developers and beta testers only! <br>
                Your server stability might be impacted by this.
            </span>
        <% } %>
    </div>
</div>  

<%- await include('parts/footer.ejs', locals) %>

<script>
    //============================================== Commands
    async function controlCommand(action) {
        let message = null;
        if(action == 'admin_broadcast'){
            message = await txAdminPrompt({
                modalColor: 'orange',
                confirmBtnClass: 'btn-orange',
                title: 'Announcement',
                description: 'Type the message to be broadcasted to all players.', 
                placeholder: 'the server will restart in xxx minutes...'
            });

            if(message.length <= 6){
                $.notify({ message: 'This message is too short!'}, {type: 'danger'});
                return;
            }
        }else if(action == 'kick_all'){
            message = await txAdminPrompt({
                modalColor: 'red',
                confirmBtnClass: 'btn-red',
                title: 'Kick All Players',
                description: 'Type the kick reason or leave it blank (press enter)',
                required: false,
            });
        }else{
            return;
        }
        if(message === null || message === false) return;

        const notify = $.notify({ message: 'Executing Command...' }, {});
        txAdminAPI({
            type: "POST",
            url: '/fxserver/commands',
            data: {
                action,
                parameter: message
            },
            success: function (data) {
                notify.update('progress', 0);
                notify.update('type', data.type);
                notify.update('message', data.message);
            },
            error: function (xmlhttprequest, textstatus, message) {
                notify.update('progress', 0);
                notify.update('type', 'danger');
                notify.update('message', message);
            }
        });
    }

    //============================================== Scheduler Stuff
    const schedulerApiCall = (action, parameter) => {
        const notify = $.notify({ message: 'Executing Command...' }, {});
        txAdminAPI({
            type: "POST",
            url: '/fxserver/schedule',
            data: {action, parameter},
            success: function (data) {
                notify.update('progress', 0);
                notify.update('type', data.type);
                notify.update('message', data.message);
            },
            error: function (xmlhttprequest, textstatus, message) {
                notify.update('progress', 0);
                notify.update('type', 'danger');
                notify.update('message', message);
            }
        });
    }
    statusCard.nextRestartBtnCancel.onclick = () => {
        schedulerApiCall('setNextSkip', true);
        statusCard.nextRestartBtnCancel.classList.add('d-none');
    }
    statusCard.nextRestartBtnEnable.onclick = () => {
        schedulerApiCall('setNextSkip', false);
        statusCard.nextRestartBtnEnable.classList.add('d-none');
    }
    document.getElementById('ctrl-schedule-restart').onclick = async () => {
        const svTimezone = '<%= serverTimezone %>';
        const timeFormatterOptions = {
            timeZone: svTimezone,
            timeStyle: 'short',
            hour12: false
        }
        const timeFormatter = new Intl.DateTimeFormat([], timeFormatterOptions);
        const serverTime = timeFormatter.format(new Date());

        const input = await txAdminPrompt({
            modalColor: 'orange',
            confirmBtnClass: 'btn-orange',
            title: 'Schedule Restart',
            placeholder: '16:15',
            description: [
                'Type in the time for the server to restart in the 24-hour format <code>HH:MM</code>.',
                'Make sure your schedule matches your server time and not your local time.',
                `<strong>Current Server Time:</strong> ${serverTime} (${svTimezone})`
            ].join('<br>'), 
        });

        const [hours, minutes] = input.split(':', 2).map(x => parseInt(x));
        if (
            typeof hours === 'undefined' || isNaN(hours) || hours < 0 || hours > 23
            || typeof minutes === 'undefined' || isNaN(minutes) || minutes < 0 || minutes > 59
        ){
            $.notify({ message: 'invalid hours:minutes'}, {type: 'danger'});
            return;
        }

        schedulerApiCall('setNextTempSchedule', input);
    }
    
    (function () {
        //============================================== Preparing variables
        const autoScrollBtn = document.getElementById("autoScrollBtn");
        const logContainer = document.getElementById("logContainer");
        const modeLabel = document.getElementById("modeLabel");
        const histLogStart = document.getElementById("histLogStart");
        const histLogEnd = document.getElementById("histLogEnd");
        const viewOlderBtn = document.getElementById("viewOlderBtn");
        const viewNewerBtn = document.getElementById("viewNewerBtn");
        const MAX_HISTORY_SIZE = 500;
        const frameTimeOptions = {weekday: 'long', hour: '2-digit', minute: '2-digit'};
        const eventTimeOptions = {hour: '2-digit', minute: '2-digit', second: '2-digit'};
        let logStartTs, logEndTs;
        let eventFilters = {};
        let autoScroll = true;
        const pageSocket = getSocket('serverlog');
        const logContainerSpinner = `<div style="height: 90%;" class="d-flex"><div style="margin: auto;">${SPINNER_HTML}</div></div>`;


        //============================================== Responsivity stuff
        const mql = window.matchMedia('(max-width: 992px)');
        const targetEl = document.getElementById('filter-control-container');
        if (mql.matches) {
          targetEl.classList.add('collapse');
        }

        mql.addEventListener("change", (e) => {
            if (e.matches && !targetEl.classList.contains('collapse')) {
              return targetEl.classList.add('collapse');
            }

            if (targetEl.classList.contains('collapse')) targetEl.classList.remove('collapse');
        })
        

        //============================================== Mode selection
        function goLive() {
            logContainer.innerHTML = logContainerSpinner;
            modeLabel.classList.remove('text-warning');
            modeLabel.classList.add('text-success');
            modeLabel.textContent = 'LIVE';
            viewOlderBtn.disabled = false;
            viewNewerBtn.disabled = true;

            //Socket stuff
            pageSocket.on('error', (error) => {
                console.log('Page Socket.IO', error)
            });
            pageSocket.on('connect', () => {
                console.log("Page Socket.IO Connected.");
                logContainer.innerHTML = '';
            });
            pageSocket.on('disconnect', (message) => {
                console.log("Page Socket.IO Disonnected:", message);
            });
            pageSocket.on('logData', processLog);
        }

        function goHistory(direction) {
            let ref;
            if(direction === 'older'){
                ref = logStartTs;
            }else if(direction === 'newer'){
                ref = logEndTs;
            }else{
                throw new Error(`unknown direction`);
            }
            pageSocket.disconnect();
            logContainer.innerHTML = logContainerSpinner;
            modeLabel.classList.add('text-warning');
            modeLabel.classList.remove('text-success');
            modeLabel.textContent = 'LOG';
            viewOlderBtn.disabled = false;
            viewNewerBtn.disabled = false;

            //Get log from API
            txAdminAPI({
                type: 'GET',
                url: `/serverLog/partial?dir=${direction}&ref=${ref}`,
                timeout: REQ_TIMEOUT_MEDIUM,
                success: function (data) {
                    logContainer.innerHTML = '';
                    if(!Array.isArray(data.log)){
                        logContainer.innerHTML = 'Failed to load log. Please refresh the page and try again.';
                        return;
                    }
                    //FIXME: reorganize this mess
                    if(data.boundry){
                        if(direction === 'older'){
                            if(!data.log.length){
                                logContainer.innerHTML = 'No more log entries to show.';
                            }else{
                                processLog(data.log);
                            }
                            viewOlderBtn.disabled = true;
                        }else{
                            goLive();
                        }
                        return;
                    }
                    processLog(data.log);

                    // TODO: da até pra depois do processLog() adicionar um <a> pra ir older ou newer
                },
                error: function (xmlhttprequest, textstatus, message) {
                    logContainer.innerHTML = 'Failed to load log. Please refresh the page and try again.';
                },
            });
        }

        // TODO: check if search string then do goLive() or goHistory()
        goLive();
        

        //============================================== Handling filters
        if(typeof window.localStorage.eventFilters !== 'undefined'){
            try {
                const fromStorage = JSON.parse(window.localStorage.eventFilters);
                console.log('Filters from storage:', fromStorage);
                if(typeof fromStorage === 'object' && fromStorage !== null) {
                    eventFilters = fromStorage;
                }
            } catch (error) {
                console.error('Failed to process window.localStorage.eventFilters');
            }
        }

        const allSwitches = document.querySelectorAll('.e-filter-sw');
        allSwitches.forEach((sw) => {
            sw.addEventListener('change', eventFiltersChanged);
            if(typeof eventFilters[sw.dataset.eType] === 'undefined'){
                eventFilters[sw.dataset.eType] = true;
            }
            sw.checked = eventFilters[sw.dataset.eType];
        });
        window.localStorage.eventFilters = JSON.stringify(eventFilters);

        const getShowTypes = () => Object.keys(eventFilters)
            .filter(fn => eventFilters[fn])
            .flatMap(fn => {
                if (fn === 'PlayerJoinLeave') return ['playerJoining', 'playerDropped'];
                if(fn === 'System') return ['LoggerStarted', 'DebugMessage'];
                return fn;
            });
        
        function eventFiltersChanged(caller){
            eventFilters[caller.target.dataset.eType] = caller.target.checked;
            window.localStorage.eventFilters = JSON.stringify(eventFilters);
            const showTypes = getShowTypes();
            console.log('showTypes:', showTypes);

            logContainer.childNodes.forEach(line => {
                if(showTypes.includes(line.dataset.eType)){
                    line.classList.remove('d-none');
                }else{
                    line.classList.add('d-none');
                }
            });
        }


        //============================================== AutoScroll Things
        const scrollBottom = () => {
            if (autoScroll) logContainer.scrollTop = logContainer.scrollHeight;
        }
        const autoscrollToggle = (status) => {
            autoScroll = status
            if(autoScroll){
                autoScrollBtn.classList.add('d-none');
            }else{
                autoScrollBtn.classList.remove('d-none');
            }
            scrollBottom();
        }
        logContainer.addEventListener('scroll',function(){
                const scrollTop = logContainer.scrollTop;
                const scrollHeight = logContainer.scrollHeight;
                const offsetHeight = logContainer.offsetHeight;
                const contentHeight = scrollHeight - offsetHeight;
                if (scrollTop < contentHeight) {
                    autoscrollToggle(false);
                } else if(scrollTop === contentHeight){
                    autoscrollToggle(true);
                }
            }
        )
        autoScrollBtn.addEventListener("click", (event) => {
            event.preventDefault();
            autoscrollToggle(true);
        });


        //============================================== Buttons
        document.getElementById("viewOlderBtn").addEventListener("click", function () {
            goHistory('older');
        });
        document.getElementById("viewNewerBtn").addEventListener("click", function () {
            goHistory('newer');
        });
        document.getElementById("clearConsole").addEventListener("click", function () {
            logContainer.innerHTML = "";
        });
        document.getElementById("showLogsModalBtn").addEventListener("click", function () {
            //TODO: add modal stuff
        });


        //============================================== Log processor
        function processLog(events) {
            console.log(`Events: ${events.length}`);
            const showTypes = getShowTypes();
            //For every new entry
            for (let i = 0; i < events.length; i++) {
                const event = events[i];
                logEndTs = event.ts;

                //Line
                const lineElement = document.createElement('div');
                lineElement.dataset.eTs = event.ts;
                lineElement.dataset.eType = event.type;
                if(!showTypes.includes(event.type)){
                    lineElement.classList.add('d-none');
                }

                //Time
                const localeTime = new Date(event.ts).toLocaleTimeString(window.navigator.language, eventTimeOptions);
                const timeNode = document.createElement('span');
                timeNode.textContent = `[${localeTime}]`;
                timeNode.classList.add('text-muted');
                lineElement.appendChild(timeNode);

                //Source
                const sourceNode = document.createElement('strong');
                sourceNode.classList.add('e-src');
                if(event.src.id){
                    const [mutex, netid] = event.src.id.split('#', 2);
                    sourceNode.classList.add('e-src-player');
                    sourceNode.addEventListener('click', ()=>{ showPlayerByMutexNetid(`${mutex}_${netid}`) });
                    sourceNode.textContent = `[${netid}] ${event.src.name}`;
                }else{
                    sourceNode.textContent = event.src.name;
                }
                lineElement.appendChild(sourceNode);

                //Message
                const msgNode = document.createTextNode(event.msg);
                lineElement.appendChild(msgNode);
                
                //Appending & capping log
                logContainer.appendChild(lineElement)
                if(logContainer.childNodes.length > MAX_HISTORY_SIZE){
                    logContainer.removeChild(logContainer.childNodes[0])
                }
            }

            //Process times
            logStartTs = parseInt(logContainer.childNodes[0].dataset.eTs);
            const logStartDate = new Date(logStartTs);
            const logEndDate = new Date(logEndTs);
            histLogStart.textContent = logStartDate.toLocaleString(window.navigator.language, frameTimeOptions);
            histLogEnd.textContent = logEndDate.toLocaleString(window.navigator.language, frameTimeOptions);

            //AutoScroll
            scrollBottom();
        }
    })();
</script>